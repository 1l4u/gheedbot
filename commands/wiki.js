const { EmbedBuilder, AttachmentBuilder } = require('discord.js');
const { checkCommandPermissions } = require('../utils/permissions');
const { dataManager } = require('../utils/data-manager');

/**
 * Wiki command handler
 * @param {Interaction} interaction - Discord interaction
 */
async function handleSlashWiki(interaction) {
  console.log(`L·ªánh wiki ƒë∆∞·ª£c g·ªçi b·ªüi ${interaction.user.tag}`);

  // Defer reply ƒë·ªÉ tr√°nh timeout
  await interaction.deferReply({ flags: 1 << 6 });

  // Ki·ªÉm tra permissions - ch·ªâ y√™u c·∫ßu channel, kh√¥ng c·∫ßn role
  const permissionCheck = checkCommandPermissions(interaction, {
    requireChannel: true,
    requireRole: false
  });

  if (!permissionCheck.allowed) {
    console.log(`T·ª´ ch·ªëi quy·ªÅn wiki cho ${interaction.user.tag}: ${permissionCheck.reason}`);
    return await interaction.editReply({
      content: permissionCheck.reason
    });
  }

  try {
    // L·∫•y v√† ki·ªÉm tra gi√° tr·ªã name
    const nameOption = interaction.options.getString('name');
    if (!nameOption) {
      console.log('Kh√¥ng c√≥ t√™n ƒë∆∞·ª£c cung c·∫•p trong interaction');
      return await interaction.editReply({
        content: 'Vui l√≤ng cung c·∫•p t√™n m·ª•c wiki'
      });
    }
    const name = nameOption.toLowerCase();
    console.log(`ƒêang t√¨m ki·∫øm wiki: ${name}`);

    // L·∫•y d·ªØ li·ªáu wiki t·ª´ data manager
    const wiki = await dataManager.getWikis();
    if (!Array.isArray(wiki)) {
      console.log('D·ªØ li·ªáu wiki kh√¥ng h·ª£p l·ªá: kh√¥ng ph·∫£i array');
      return await interaction.editReply({
        content: 'D·ªØ li·ªáu wiki kh√¥ng h·ª£p l·ªá'
      });
    }

    // T√¨m t·∫•t c·∫£ c√°c m·ª•c wiki kh·ªõp v·ªõi name
    const matchedWikiItems = wiki.filter(
      item => item && typeof item.name === 'string' && item.name.toLowerCase() === name
    );

    if (matchedWikiItems.length === 0) {
      return await interaction.editReply({
        content: `Kh√¥ng t√¨m th·∫•y th√¥ng tin wiki cho "${name}"`
      });
    }

    // T·∫°o embeds v√† files cho t·ª´ng m·ª•c wiki kh·ªõp
    const embeds = [];
    const files = [];

    for (const wikiItem of matchedWikiItems) {
      // X·ª≠ l√Ω text content
      let textContents = [];
      if (wikiItem.text && Array.isArray(wikiItem.text)) {
        textContents = wikiItem.text;
      } else if (typeof wikiItem.text === 'string') {
        textContents = [wikiItem.text];
      } else {
        textContents = ['Kh√¥ng c√≥ th√¥ng tin chi ti·∫øt'];
      }

      // T·∫°o embed cho m·ªói ph·∫ßn text
      for (let i = 0; i < textContents.length; i++) {
        const textContent = textContents[i];
        const embed = new EmbedBuilder()
          .setColor('#ff6600')
          .setTitle(`${wikiItem.name}${textContents.length > 1 ? ` ` : ''}`);

        if (wikiItem.url) {
          embed.setURL(wikiItem.url);
        }


        if (textContent) {
          // Chia text th√†nh nhi·ªÅu fields n·∫øu qu√° d√†i
          const maxFieldLength = 1024;
          const fields = [];

          if (textContent.length <= maxFieldLength) {
            fields.push({
              name: '',
              value: textContent,
              inline: false
            });
          } else {
            let remainingText = textContent;
            let partNumber = 1;

            while (remainingText.length > 0) {
              let chunk = remainingText.substring(0, maxFieldLength);

              // T√¨m v·ªã tr√≠ ng·∫Øt d√≤ng ho·∫∑c kho·∫£ng tr·∫Øng g·∫ßn nh·∫•t
              if (remainingText.length > maxFieldLength) {
                const lastNewline = chunk.lastIndexOf('\n');
                const lastSpace = chunk.lastIndexOf(' ');
                const breakPoint = lastNewline > -1 ? lastNewline : (lastSpace > -1 ? lastSpace : maxFieldLength);

                if (breakPoint > 0 && breakPoint < maxFieldLength) {
                  chunk = chunk.substring(0, breakPoint);
                }
              }

              fields.push({
                name: partNumber === 1 ? '' : ``,
                value: chunk,
                inline: false
              });

              remainingText = remainingText.substring(chunk.length).trim();
              partNumber++;

              // Gi·ªõi h·∫°n t·ªëi ƒëa 5 fields
              if (partNumber > 5) {
                fields.push({
                  name: 'Th√¥ng tin b·ªã c·∫Øt',
                  value: '... (n·ªôi dung qu√° d√†i, ƒë√£ b·ªã c·∫Øt)',
                  inline: false
                });
                break;
              }
            }
          }

          embed.addFields(fields);
        } else {
          embed.setDescription('Kh√¥ng c√≥ th√¥ng tin chi ti·∫øt');
        }

        // X·ª≠ l√Ω file attachment n·∫øu n·ªôi dung qu√° d√†i
        if (textContent && textContent.length > 4000) {
          const buffer = Buffer.from(textContent, 'utf8');
          const attachment = new AttachmentBuilder(buffer, {
            name: `${wikiItem.name}${textContents.length > 1 ? `_part${i + 1}` : ''}_info.txt`,
            description: `Th√¥ng tin ƒë·∫ßy ƒë·ªß cho ${wikiItem.name}${textContents.length > 1 ? `` : ''}`
          });
          files.push(attachment);

          embed.addFields([{
            name: 'üìé File ƒë√≠nh k√®m',
            value: 'N·ªôi dung ƒë·∫ßy ƒë·ªß ƒë∆∞·ª£c g·ª≠i trong file ƒë√≠nh k√®m',
            inline: false
          }]);
        }

        embeds.push(embed);
      }
    }

    await interaction.editReply({
      embeds: embeds,
      files: files
    });

    console.log(`ƒê√£ g·ª≠i ph·∫£n h·ªìi wiki cho: ${name}`);
  } catch (error) {
    console.error('L·ªói l·ªánh wiki:', error);
    await interaction.editReply({
      content: 'ƒê√£ x·∫£y ra l·ªói khi t√¨m ki·∫øm wiki'
    });
  }
}

module.exports = {
  handleSlashWiki
};