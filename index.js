require('dotenv').config();
const { Client, GatewayIntentBits } = require('discord.js');
const runewords = require('./runeword.json'); // File JSON c·ªßa b·∫°n



const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent
  ]
});

client.on('ready', () => {
  console.log(`Bot ƒë√£ s·∫µn s√†ng: ${client.user.tag}`);
});


client.on('messageCreate', async (message) => {
  if (!message.content.toLowerCase().startsWith('!rw')) return;

  const searchTerm = message.content.slice(4).trim();
  
  // Ki·ªÉm tra ƒë·∫ßu v√†o
  if (!searchTerm) {
    return message.reply({
      content: 'üê∫ ·∫≥ng ·∫≥ng ·∫≥ng! H√£y nh·∫≠p t√™n Runeword (v√≠ d·ª•: `!rw lore`)',
      allowedMentions: { repliedUser: false }
    });
  }

  // T√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
  const foundKey = Object.keys(runewords).find(key => 
    key.toLowerCase() === searchTerm.toLowerCase()
  );

  if (!foundKey) {
    return message.reply({
      content: `üê∫ ·∫≥ng ·∫≥ng ·∫≥ng! Kh√¥ng t√¨m th·∫•y Runeword "${searchTerm}"`,
      allowedMentions: { repliedUser: false }
    });
  }

  const item = runewords[foundKey];

  // X·ª≠ l√Ω c·∫£ tr∆∞·ªùng h·ª£p item l√† array ho·∫∑c object
  const itemsToDisplay = Array.isArray(item) ? item : [item];

  try {
    // G·ª≠i t·ª´ng embed cho m·ªói phi√™n b·∫£n
    for (const rw of itemsToDisplay) {
      const embed = {
        title: rw.name || foundKey,
        color: 0xFF9900, // M√†u cam
        fields: [
          { name: 'Types', value: rw.types?.join(', ') || 'N/A' },
          { name: 'Required Level', value: rw.level || 'N/A' },
          { 
            name: 'Options', 
            value: rw.option?.map(opt => `${opt}`).join('\n') || 'N/A',
            inline: false 
          }
        ],
        footer: { text: `Requested by ${message.author.username}` },
        timestamp: new Date()
      };

      await message.reply({ 
        embeds: [embed],
        allowedMentions: { repliedUser: false }
      });
    }
  } catch (error) {
    console.error('L·ªói khi g·ª≠i embed:', error);
    message.reply({
      content: 'üê∫ ·∫≥ng! C√≥ l·ªói khi hi·ªÉn th·ªã th√¥ng tin Runeword',
      allowedMentions: { repliedUser: false }
    });
  }
});

// Thay YOUR_BOT_TOKEN b·∫±ng token c·ªßa b·∫°n
client.login(process.env.DISCORD_TOKEN);