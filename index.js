require("dotenv").config();
const { Client, GatewayIntentBits, ChannelType, PermissionFlagsBits, EmbedBuilder, SlashCommandBuilder, Routes, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder } = require("discord.js");
const { REST } = require('@discordjs/rest');
const runewords = require("./runeword.json");
const wiki = require("./wiki.json");
const express = require("express");
const config = require('./config.json');
const app = express();
const PORT = process.env.PORT || 3000;


// T·∫°o m·ªôt route ƒë∆°n gi·∫£n ƒë·ªÉ gi·ªØ app "alive"
app.get("/ping", (req, res) => {
  res.send("Pong!");
});

app.listen(PORT, () => {
  console.log(`Web server is running on port ${PORT}`);
});

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers
  ],
});

// ƒêƒÉng k√Ω Slash Commands
const commands = [
  new SlashCommandBuilder()
    .setName('rw')
    .setDescription('T√¨m ki·∫øm runeword')
    .addStringOption(option =>
      option.setName('name')
        .setDescription('T√™n runeword c·∫ßn t√¨m')
        .setRequired(true)
        .setAutocomplete(true)),
  new SlashCommandBuilder()
    .setName('wiki')
    .setDescription('T√¨m ki·∫øm th√¥ng tin wiki')
    .addStringOption(option =>
      option.setName('query')
        .setDescription('T·ª´ kh√≥a c·∫ßn t√¨m (nh·∫•n n√∫t ƒë·ªÉ xem danh s√°ch)')
        .setRequired(false)
        .setAutocomplete(true)),
  new SlashCommandBuilder()
    .setName('search')
    .setDescription('T√¨m runeword theo lo·∫°i')
    .addStringOption(option =>
      option.setName('type')
        .setDescription('Lo·∫°i runeword (armors, weapons, etc)')
        .setRequired(true)),
  new SlashCommandBuilder()
    .setName('chance')
    .setDescription('T√≠nh t·ªïng crit chance')
    .addIntegerOption(option =>
      option.setName('ds')
        .setDescription('Deadly Strike %')
        .setRequired(true))
    .addIntegerOption(option =>
      option.setName('cs')
        .setDescription('Critical Strike %')
        .setRequired(true))
    .addIntegerOption(option =>
      option.setName('wm')
        .setDescription('Weapon Mastery %')
        .setRequired(true)),
  new SlashCommandBuilder()
    .setName('tas')
    .setDescription('T√≠nh Total Attack Speed')
    .addIntegerOption(option =>
      option.setName('ias')
        .setDescription('IAS %')
        .setRequired(true))
    .addIntegerOption(option =>
      option.setName('skill_ias')
        .setDescription('Skill IAS %')
        .setRequired(true))
    .addIntegerOption(option =>
      option.setName('wsm')
        .setDescription('Weapon Speed Modifier')
        .setRequired(true)),
  new SlashCommandBuilder()
    .setName('ias')
    .setDescription('T√≠nh IAS c·∫ßn thi·∫øt')
    .addIntegerOption(option =>
      option.setName('tas')
        .setDescription('TAS %')
        .setRequired(true))
    .addIntegerOption(option =>
      option.setName('skill_ias')
        .setDescription('Skill IAS %')
        .setRequired(true))
    .addIntegerOption(option =>
      option.setName('wsm')
        .setDescription('Weapon Speed Modifier')
        .setRequired(true)),
  new SlashCommandBuilder()
    .setName('hotkey')
    .setDescription('Hi·ªÉn th·ªã c√°c ph√≠m t·∫Øt trong game'),
  new SlashCommandBuilder()
    .setName('hardcore')
    .setDescription('Hi·ªÉn th·ªã c√¢u n√≥i vui v·ªÅ Hardcore'),
  new SlashCommandBuilder()
    .setName('list')
    .setDescription('Li·ªát k√™ t·∫•t c·∫£ c√°c m·ª•c trong wiki')
].map(command => command.toJSON());

const rest = new REST({ version: '10' }).setToken(process.env.DISCORD_TOKEN);

(async () => {
  try {
    console.log('ƒêang ƒëƒÉng k√Ω slash commands...');
    await rest.put(
      Routes.applicationCommands(process.env.CLIENT_ID),
      { body: commands }
    );
    console.log('ƒêƒÉng k√Ω slash commands th√†nh c√¥ng!');
  } catch (error) {
    console.error('L·ªói khi ƒëƒÉng k√Ω slash commands:', error);
  }
})();

// X·ª≠ l√Ω Slash Commands
client.on('interactionCreate', async interaction => {
    const { commandName, options } = interaction;
if (interaction.isAutocomplete()) {
  if (interaction.commandName === 'wiki') {
      const focusedValue = interaction.options.getFocused().toLowerCase();
      const filtered = Object.keys(wiki).filter(key => 
      key.toLowerCase().includes(focusedValue)
      ).slice(0, 25); // Discord gi·ªõi h·∫°n 25 l·ª±a ch·ªçn

      await interaction.respond(
      filtered.map(key => ({ name: key, value: key }))
      );
  }
  if (interaction.commandName === 'rw') {
    try {
      const focusedValue = interaction.options.getFocused().toLowerCase();
      const filtered = Object.keys(runewords).filter(key => 
        key.toLowerCase().includes(focusedValue)
      ).slice(0, 25); // Gi·ªõi h·∫°n 25 l·ª±a ch·ªçn

      await interaction.respond(
        filtered.map(key => ({ name: key, value: key }))
      );
    } catch (err) {
      console.error('L·ªói x·ª≠ l√Ω l·ªánh rw:', err);
      // ch·ªâ n√™n g·ªçi editReply n·∫øu ƒë√£ deferReply
      if (interaction.deferred) {
        await interaction.editReply({ content: '```üê∫ ƒê√£ x·∫£y ra l·ªói!```' });
      }
    }
  }
  }

  if (interaction.isButton()) {
    if (interaction.customId === 'show_wiki_list') {
        await handleSlashList(interaction);
    }
    if (interaction.customId === 'show_rw_list') {
      await handleRunewordList(interaction);
    }
  }

  if (interaction.isCommand()){
  try {
    switch (commandName) {
      case 'rw':
        await handleSlashRuneword(interaction);
        break;
      case 'wiki':
        await handleSlashWiki(interaction);
        break;
      case 'search':
        await handleSlashSearch(interaction);
        break;
      case 'chance':
        await handleSlashCritChance(interaction);
        break;
      case 'tas':
        await handleSlashTas(interaction);
        break;
      case 'ias':
        await handleSlashIas(interaction);
        break;
      case 'hotkey':
        await interaction.reply({
          content: getHotkeyText(),
          flags: 1 << 6
        });
        break;
      case 'hardcore':
        await interaction.reply({
          content: getHardcoreText(),
          flags: 1 << 6
        });
        break;
      case 'list':
        await handleSlashList(interaction);
        break;
      default:
        await interaction.reply({
          content: 'L·ªánh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£',
          flags: 1 << 6
        });
    }
	
  } catch (error) {
    console.error(`L·ªói khi x·ª≠ l√Ω l·ªánh ${commandName}:`, error);
    await interaction.reply({
      content: '```üê∫ ƒê√£ x·∫£y ra l·ªói!```',
      flags: 1 << 6
    });
  }}
});

// C√°c h√†m x·ª≠ l√Ω Slash Command
async function handleSlashRuneword(interaction) {
  const searchTerm = interaction.options.getString('name');

  if (!searchTerm) {
    const button = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('show_rw_list')
          .setLabel('üìú Xem to√†n b·ªô danh s√°ch')
          .setStyle(ButtonStyle.Primary)
      );

    await interaction.reply({
      content: '**H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng**\n\n' +
               '1. G√µ tr·ª±c ti·∫øp t√™n m·ª•c b·∫°n mu·ªën t√¨m\n' +
               '2. Ho·∫∑c nh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ xem to√†n b·ªô danh s√°ch',
      components: [button],
      flags: 1 << 6,
      fetchReply: true
    });

    // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n button
    const filter = i => i.customId === 'show_rw_list' && i.user.id === interaction.user.id;
    const collector = interaction.channel.createMessageComponentCollector({ filter, time: 30000 });

    collector.on('collect', async i => {
      await i.deferUpdate(); // ·∫®n "loading"
      await handleRunewordList(i);
    });

    collector.on('end', () => {
      interaction.editReply({ components: [] }).catch(console.error); // X√≥a button sau 30s
    });

    return;
  }

  const foundKey = Object.keys(runewords).find(
    key => key.toLowerCase() === searchTerm.toLowerCase()
  );

  if (!foundKey) {
    // G·ª£i √Ω c√°c runeword g·∫ßn gi·ªëng
    const similarKeys = Object.keys(runewords).filter(key => 
      key.toLowerCase().includes(searchTerm.toLowerCase())
    ).slice(0, 5);

    if (similarKeys.length > 0) {
      const embed = new EmbedBuilder()
        .setColor('#FFA500')
        .setTitle(`Kh√¥ng t√¨m th·∫•y "${searchTerm}"`)
        .setDescription(`C√≥ th·ªÉ b·∫°n ƒëang t√¨m:\n${similarKeys.map(k => `- ${k}`).join('\n')}`);

      return interaction.reply({ embeds: [embed], flags : 1 << 6 });
    }

    return interaction.reply({
      content: `\`\`\`\nüê∫ Kh√¥ng t√¨m th·∫•y Runeword "${searchTerm}"\n\`\`\``,
      flags : 1 << 6
    });
  }

  const items = Array.isArray(runewords[foundKey]) ? runewords[foundKey] : [runewords[foundKey]];
  const embeds = [];

  for (const rw of items) {
    const embed = new EmbedBuilder()
      .setColor('#0099ff')
      .setTitle(rw.name || foundKey)
      .addFields(
        { name: 'Lo·∫°i', value: rw.types?.join(", ") || "N/A", inline: false },
        { name: 'Y√™u c·∫ßu c·∫•p ƒë·ªô', value: rw.level?.toString() || "N/A", inline: false }
      );

    if (rw.option) {
      embed.addFields(
        { name: '', value: rw.option.join("\n") }
      );
    }

    embeds.push(embed);
  }

  await interaction.reply({
    embeds: embeds,
    flags: 1 << 6
  });
}

async function handleSlashWiki(interaction) {
  const searchTerm = interaction.options.getString('query');
  
  // Tr∆∞·ªùng h·ª£p kh√¥ng nh·∫≠p query
  if (!searchTerm) {
    const button = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('show_wiki_list')
          .setLabel('Xem to√†n b·ªô danh s√°ch')
          .setStyle(ButtonStyle.Primary)
      );

    await interaction.reply({
      content: '**H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng**\n\n' +
               '1. G√µ tr·ª±c ti·∫øp t√™n m·ª•c b·∫°n mu·ªën t√¨m\n' +
               '2. Ho·∫∑c nh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ xem to√†n b·ªô danh s√°ch',
      components: [button],
      flags: 1 << 6,
      fetchReply: true
    });

    // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n button
    const filter = i => i.customId === 'show_wiki_list' && i.user.id === interaction.user.id;
    const collector = interaction.channel.createMessageComponentCollector({ filter, time: 30000 });

    collector.on('collect', async i => {
      await i.deferUpdate(); // ·∫®n "loading"
      await handleSlashList(i);
    });

    collector.on('end', () => {
      interaction.editReply({ components: [] }).catch(console.error); // X√≥a button sau 30s
    });

    return;
  }

  // Ph·∫ßn x·ª≠ l√Ω t√¨m ki·∫øm wiki b√¨nh th∆∞·ªùng
  const foundKey = Object.keys(wiki).find(
    key => key.toLowerCase() === searchTerm.toLowerCase()
  );

  if (!foundKey) {
    // T√¨m c√°c t·ª´ kh√≥a g·∫ßn ƒë√∫ng
    const similarKeys = Object.keys(wiki).filter(key => 
      key.toLowerCase().includes(searchTerm.toLowerCase()) || 
      searchTerm.toLowerCase().includes(key.toLowerCase())
    ).slice(0, 5); // Gi·ªõi h·∫°n 5 g·ª£i √Ω

    if (similarKeys.length > 0) {
      const embed = new EmbedBuilder()
        .setColor('#FFA500')
        .setTitle(`Kh√¥ng t√¨m th·∫•y "${searchTerm}"`)
        .setDescription(`C√≥ th·ªÉ b·∫°n ƒëang t√¨m ki·∫øm:\n${similarKeys.map(k => `- ${k}`).join('\n')}\n\nNh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ xem to√†n b·ªô danh s√°ch`);

      const button = new ActionRowBuilder()
        .addComponents(
          new ButtonBuilder()
            .setCustomId('show_wiki_list')
            .setLabel('Xem to√†n b·ªô danh s√°ch')
            .setStyle(ButtonStyle.Primary)
        );

      return await interaction.reply({
        embeds: [embed],
        components: [button],
        flags: 1 << 6
      });
    }

    return await interaction.reply({
      content: `\`\`\`\nüê∫ Kh√¥ng t√¨m th·∫•y "${searchTerm}"\nS·ª≠ d·ª•ng /list ƒë·ªÉ xem to√†n b·ªô danh s√°ch\`\`\``,
      flags: 1 << 6
    });
  }

  const items = Array.isArray(wiki[foundKey]) ? wiki[foundKey] : [wiki[foundKey]];
  const combinedContent = items.map(w => w.text || foundKey).join("");

  const embed = new EmbedBuilder()
    .setColor('#0099ff')
    .setDescription(combinedContent);

  await interaction.reply({
    embeds: [embed],
    flags: 1 << 6
  });
}

async function handleSlashSearch(interaction) {
  const searchType = interaction.options.getString('type').toLowerCase();
  const matchedRunewords = new Map();
  
  Object.entries(runewords).forEach(([name, data]) => {
    const items = Array.isArray(data) ? data : [data];
    items.forEach(rw => {
      if (rw.types?.some(t => t.toLowerCase().split(/\s*,\s*/).includes(searchType))) {
        const key = rw.name?.toLowerCase() || name.toLowerCase();
        if (!matchedRunewords.has(key)) {
          matchedRunewords.set(key, {
            name: rw.name || name,
            types: [...new Set(rw.types)],
            variants: []
          });
        }
        matchedRunewords.get(key).variants.push({
          level: rw.level,
          option: rw.option
        });
      }
    });
  });

  if (matchedRunewords.size === 0) {
    return await interaction.reply({
      content: `\`\`\`\nüê∫ Kh√¥ng t√¨m th·∫•y runeword n√†o thu·ªôc lo·∫°i "${searchType}"\`\`\``,
      flags: 1 << 6
    });
  }

  const resultText = `\`\`\`\nRunewords thu·ªôc lo·∫°i "${searchType}" (${matchedRunewords.size} k·∫øt qu·∫£):\n\n` +
    Array.from(matchedRunewords.values())
      .sort((a, b) => a.name.localeCompare(b.name))
      .map((rw, i) => `${i + 1}. ${rw.name}`)
      .join("\n") + "\n```";
  
  await interaction.reply({
    content: resultText,
    flags: 1 << 6
  });
}

async function handleSlashCritChance(interaction) {
  const ds = interaction.options.getInteger('ds');
  const cs = interaction.options.getInteger('cs');
  const wm = interaction.options.getInteger('wm');

  if (ds < 0 || cs < 0 || wm < 0 || cs > 75 || wm > 75) {
    return await interaction.reply({
      content: 'Gi√° tr·ªã ph·∫£i t·ª´ 0% ƒë·∫øn 75%! (DS c√≥ th·ªÉ 100% n·∫øu mang ƒë·ªì tƒÉng max DS)',
      flags: 1 << 6
    });
  }

  const totalCritChance = 1 - ((1 - ds/100) * (1 - cs/100) * (1 - wm/100));
  await interaction.reply({
    content: `T·ªïng Crit Chance: ${(totalCritChance * 100).toFixed(2)}% (Gi·ªõi h·∫°n: 95%)`,
    flags: 1 << 6
  });
}

async function handleSlashTas(interaction) {
  const ias = interaction.options.getInteger('ias');
  const skillIas = interaction.options.getInteger('skill_ias');
  const wsm = interaction.options.getInteger('wsm');

  const eias = Math.floor((120 * ias) / (120 + ias));
  const tas = eias + skillIas - wsm;

  const embed = new EmbedBuilder()
    .setColor('#0099ff')
    .addFields(
      { name: 'EIAS - Effective Item IAS', value: `${eias}%`, inline: false },
      { name: 'TAS - Total Attack Speed', value: `${tas}%`, inline: false },
      { name: 'C√¥ng th·ª©c', value: `- TAS = EIAS + Skill_IAS - WSM\n- EIAS = (120 * IAS) / (120 + IAS)` }
    )
    .setFooter({ text: `Y√™u c·∫ßu b·ªüi ${interaction.user.username}` });

  await interaction.reply({
    embeds: [embed],
    flags: 1 << 6
  });
}

async function handleSlashIas(interaction) {
  const tas = interaction.options.getInteger('tas');
  const skillIas = interaction.options.getInteger('skill_ias');
  const wsm = interaction.options.getInteger('wsm');

  const eias = tas - skillIas + wsm;
  const ias = (120 * eias) / (120 - eias);

  const embed = new EmbedBuilder()
    .setColor('#0099ff')
    .addFields(
      { name: 'IAS c·∫ßn thi·∫øt', value: `${ias.toFixed(2)}%`, inline: true }
    )
    .setFooter({ text: `Y√™u c·∫ßu b·ªüi ${interaction.user.username}` });

  await interaction.reply({
    embeds: [embed],
    flags: 1 << 6
  });
}


async function handleSlashList(interaction) {
  // X·ª≠ l√Ω defer cho button interaction
  const isButton = interaction.isButton();
  if (isButton) {
    await interaction.deferUpdate();
  }

  const allItems = Object.keys(wiki).sort();
  const chunkSize = 20;
  const totalPages = Math.ceil(allItems.length / chunkSize);

  // H√†m t·∫°o embed cho t·ª´ng trang
  const createListEmbed = (page) => {
    const startIdx = (page - 1) * chunkSize;
    const endIdx = startIdx + chunkSize;
    const items = allItems.slice(startIdx, endIdx);

    return new EmbedBuilder()
      .setTitle(`Danh s√°ch Wiki (Trang ${page}/${totalPages})`)
      .setDescription(items.map((item, idx) => `**${startIdx + idx + 1}.** ${item}`).join('\n'))
      .setColor('#0099ff')
      .setFooter({ text: `D√πng "/wiki <t√™n m·ª•c>" ƒë·ªÉ xem chi ti·∫øt` });
  };

  // T·∫°o action row v·ªõi c√°c n√∫t ph√¢n trang
  const createActionRow = (currentPage) => {
    return new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId('prev_page')
        .setLabel('‚óÄ')
        .setStyle(ButtonStyle.Secondary)
        .setDisabled(currentPage <= 1),
      new ButtonBuilder()
        .setCustomId('next_page')
        .setLabel('‚ñ∂')
        .setStyle(ButtonStyle.Secondary)
        .setDisabled(currentPage >= totalPages)
    );
  };

  let currentPage = 1;
  const initialEmbed = createListEmbed(currentPage);
  const initialRow = createActionRow(currentPage);

  try {
    // X·ª≠ l√Ω reply kh√°c nhau cho button v√† slash command
    if (isButton) {
      // G·ª≠i d∆∞·ªõi d·∫°ng followUp cho button interaction
      const message = await interaction.followUp({
        embeds: [initialEmbed],
        components: [initialRow],
        flags: 1 << 6,
        fetchReply: true
      });

      // T·∫°o collector cho ph√¢n trang
      const collector = message.createMessageComponentCollector({ time: 60000 });

      collector.on('collect', async i => {
        if (i.customId === 'prev_page') currentPage--;
        if (i.customId === 'next_page') currentPage++;

        await i.deferUpdate();
        await i.editReply({
          embeds: [createListEmbed(currentPage)],
          components: [createActionRow(currentPage)]
        });
      });

      collector.on('end', () => {
        interaction.editReply({ components: [] }).catch(console.error);
      });

    } else {
      // G·ª≠i d∆∞·ªõi d·∫°ng reply cho slash command
      const message = await interaction.reply({
        embeds: [initialEmbed],
        components: [initialRow],
        flags: 1 << 6,
        fetchReply: true
      });

      // T·∫°o collector cho ph√¢n trang
      const collector = message.createMessageComponentCollector({ time: 60000 });

      collector.on('collect', async i => {
        if (i.customId === 'prev_page') currentPage--;
        if (i.customId === 'next_page') currentPage++;

        await i.deferUpdate();
        await i.editReply({
          embeds: [createListEmbed(currentPage)],
          components: [createActionRow(currentPage)]
        });
      });

      collector.on('end', () => {
        interaction.editReply({ components: [] }).catch(console.error);
      });
    }
  } catch (error) {
    console.error('L·ªói khi x·ª≠ l√Ω handleSlashList:', error);
    if (isButton) {
      await interaction.followUp({
        content: 'ƒê√£ x·∫£y ra l·ªói khi t·∫£i danh s√°ch',
        flags: 1 << 6
      });
    } else {
      await interaction.reply({
        content: 'ƒê√£ x·∫£y ra l·ªói khi t·∫£i danh s√°ch',
        flags: 1 << 6
      });
    }
  }
}

async function handleSlashClear(interaction) {
  try {
    const member = interaction.member;
    const isAllowedUser = member.id === config.clear_member_id;

    if (!isAllowedUser) {
      return await interaction.editReply({
        content: ' B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.',
        flags : 1 << 6
      });
    }

    await interaction.editReply({
      content: 'ƒêang x·ª≠ l√Ω x√≥a tin nh·∫Øn...',
      flags : 1 << 6
    });

    const channel = interaction.channel;
    let deletedCount = 0;
    let fetched;
    
    do {
      fetched = await channel.messages.fetch({ limit: 100 });
      const deletable = fetched.filter(msg => 
        Date.now() - msg.createdTimestamp < 14 * 24 * 60 * 60 * 1000
      );
      
      if (deletable.size > 0) {
        await channel.bulkDelete(deletable, true);
        deletedCount += deletable.size;
      }
    } while (fetched.size >= 2);

    await interaction.editReply({
      content: ` ƒê√£ xo√° ${deletedCount} tin nh·∫Øn (ch·ªâ nh·ªØng tin nh·∫Øn < 14 ng√†y).`,
      flags : 1 << 6
    });

  } catch (err) {
    console.error('L·ªói khi x√≥a tin nh·∫Øn:', err);
    await interaction.editReply({
      content: ' ƒê√£ x·∫£y ra l·ªói khi xo√° tin nh·∫Øn.',
      flags : 1 << 6
    });
  }
}

    
async function handleRunewordList(interaction) {
  const allRunewords = Object.keys(runewords).sort();
  const chunkSize = 20;
  const chunks = [];
  
  for (let i = 0; i < allRunewords.length; i += chunkSize) {
    chunks.push(allRunewords.slice(i, i + chunkSize));
  }

  const createEmbed = (page) => new EmbedBuilder()
    .setTitle(`Danh s√°ch Runewords (Trang ${page}/${chunks.length})`)
    .setDescription(chunks[page-1].map((rw, i) => `**${i+1}.** ${rw}`).join('\n'))
    .setColor('#0099ff');

  let currentPage = 1;
  const row = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('rw_prev')
        .setLabel('‚óÄ')
        .setStyle(ButtonStyle.Secondary)
        .setDisabled(true),
      new ButtonBuilder()
        .setCustomId('rw_next')
        .setLabel('‚ñ∂')
        .setStyle(ButtonStyle.Secondary)
        .setDisabled(chunks.length <= 1)
    );

  const reply = await interaction.reply({
    embeds: [createEmbed(currentPage)],
    components: [row],
    flags : 1 << 6,
    fetchReply: true
  });

  // X·ª≠ l√Ω ph√¢n trang
  const collector = reply.createMessageComponentCollector({ time: 60000 });

  collector.on('collect', async i => {
    if (i.customId === 'rw_prev') currentPage--;
    if (i.customId === 'rw_next') currentPage++;

    await i.deferUpdate();
    row.components[0].setDisabled(currentPage <= 1);
    row.components[1].setDisabled(currentPage >= chunks.length);
    
    await i.editReply({
      embeds: [createEmbed(currentPage)],
      components: [row]
    });
  });

  collector.on('end', () => {
    interaction.editReply({ components: [] }).catch(console.error);
  });
}

// C√°c h√†m ti·ªán √≠ch
function getHotkeyText() {
  return "```1. Khi c·∫ßm nguy√™n Stack (2+ v·∫≠t ph·∫©m tr·ªü l√™n):\n     Gi·ªØ chu·ªôt tr√°i tr√™n stack ƒë·ªÉ di chuy·ªÉn c·∫£ ch·ªìng stack ƒë√≥.\n     Ctrl + Shift + Click v√†o √¥ tr·ªëng: T√°ch ra 1 v·∫≠t ph·∫©m (v·∫≠t ph·∫©m n√†y s·∫Ω kh√¥ng stack nghƒ©a l√† kh√¥ng c√≥ d·∫•u + tr√™n v·∫≠t ph·∫©m, n·∫øu l√† rune v√† gem th√¨ c√≥ th·ªÉ √©p v√†o ƒë·ªì).\n     Ctrl + Click v√†o √¥ tr·ªëng: T√°ch ra 1 v·∫≠t ph·∫©m (v·∫´n gi·ªØ stack c√≥ d·∫•u +, c√≥ th·ªÉ g·ªôp l·∫°i sau, n·∫øu l√† rune v√† gem th√¨ kh√¥ng th·ªÉ √©p v√†o ƒë·ªì).\n\n2. Khi ch·ªâ c√≥ 1 v·∫≠t ph·∫©m stack(hi·ªÉn th·ªã d·∫•u +):\nThao t√°c nh∆∞ tr√™n ho·∫∑c\n     Ctrl + Shift + Click: Chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô stack/kh√¥ng stack.\n     Shift + Left Click: Identify item\n     Shift + Right Click: Di chuy·ªÉn gi·ªØa c√°c th√πng ƒë·ªì(inventory <-> stash <-> cube)\n     Ctrl + Right Click: n√©m xu·ªëng ƒë·∫•t\n     Ctrl + Shift + Right Click: Di chuy·ªÉn v√†o cube(cube kh√¥ng ƒë∆∞·ª£c m·ªü n·∫øu kh√¥ng s·∫Ω n√©m xu·ªëng ƒë·∫•t)\n\n3. Khi c·ªông ƒëi·ªÉm skill ho·∫∑c stat:\n     Ctrl + Left Click: 5 ƒëi·ªÉm\n     Shift + Left Click: 20 ƒëi·ªÉm\n     Ctrl + Shift + Left Click: All\n\n4. Currency Stash: Khi b·∫°n ƒë·∫∑t c√°c v·∫≠t ph·∫©m v√†o stash, ch√∫ng s·∫Ω t·ª± ƒë·ªông chuy·ªÉn v√†o Currency Stash, cho ph√©p x·∫øp ch·ªìng Rejuv.\n     Left Click: L·∫•y 1 v·∫≠t ph·∫©m l√™n chu·ªôt\n     Right Click: L·∫•y m·ªôt v·∫≠t ph·∫©m v√†o inventory\n     Ctrl + (Left / Right Click): L·∫•y 5 v·∫≠t ph·∫©m (chu·ªôt / inventory)\n     Shift + (Left / Right Click): L·∫•y 20 v·∫≠t ph·∫©m (chu·ªôt / inventory)\n     Ctrl + Shift + (Left / Right Click): L·∫•y 50 v·∫≠t ph·∫©m (chu·ªôt / inventory)```";
}

function getHardcoreText() {
  return "*Hardcore kh√¥ng ph·∫£i l√† m·ªôt l·ªëi ch∆°i, m√† l√† m·ªôt c√°ch s·ªëng... r·∫•t ng·∫Øn.*" + "\n*Ch∆°i Hardcore kh√¥ng ph·∫£i ƒë·ªÉ ch·ª©ng t·ªè b·∫°n gi·ªèi, m√† ƒë·ªÉ ch·ª©ng t·ªè b·∫°n‚Ä¶ ch·ªãu ƒë·ª±ng gi·ªèi.*";
}

client.on('messageCreate', async message => {
  if (message.author.bot) return;

  // Ki·ªÉm tra bypass
  if (hasBypassPermission(message.member)) return;

  const isSpamChannel = config.allowedChannels_spam?.includes(message.channel.id);
  const isShowChannel = config.allowedChannels_show?.includes(message.channel.id);
  
  // --- X·ª≠ l√Ω cho spam channel ---
  if (isSpamChannel) {
    if (isValidCommand(message.content)) return handleCommand(message);

    try {
      // Xo√° tin nh·∫Øn ng∆∞·ªùi d√πng
      await message.delete().catch(err => {
        if (err.code !== 10008) throw err;
        console.warn(`Tin nh·∫Øn ƒë√£ b·ªã xo√° tr∆∞·ªõc ƒë√≥ (spam channel):`, err.message);
      });

      // G·ª≠i c·∫£nh b√°o
      await sendWarning(message);
    } catch (err) {
      console.error('L·ªói x√≥a tin nh·∫Øn spam:', err);
    }
    return;
  }

  // --- X·ª≠ l√Ω cho show channel ---
  if (isShowChannel) {
    const hasImage = message.attachments.some(attach =>
      config.imageExtensions.some(ext => attach.name?.toLowerCase().endsWith(ext))
    );

    const hasImageEmbed = message.embeds.some(embed => embed.image || embed.thumbnail);

    if (!hasImage && !hasImageEmbed) {
      try {
        await message.delete().catch(err => {
          if (err.code !== 10008) throw err;
          console.warn(`Tin nh·∫Øn ƒë√£ b·ªã xo√° tr∆∞·ªõc ƒë√≥ (show channel):`, err.message);
        });

        const warning = await message.channel.send(`${message.author}, ch·ªâ g·ª≠i h√¨nh ·ªü ƒë√¢y!`);
        setTimeout(() => warning.delete().catch(() => {}), 5000);
      } catch (err) {
        console.error('L·ªói x·ª≠ l√Ω tin nh·∫Øn kh√¥ng h√¨nh:', err);
      }
    }
    return;
  }
});


// --- C√°c h√†m h·ªó tr·ª£ --- //

// Ki·ªÉm tra quy·ªÅn b·ªè qua b·∫±ng ROLE ID
function hasBypassPermission(member) {
  if (!member) return false;
  return config.allowedRoles.some(id => member.roles.cache.has(id));
}

// Ki·ªÉm tra l·ªánh h·ª£p l·ªá v·ªõi regex
function isValidCommand(content) {
  const pattern = new RegExp(
    `^${config.prefix}(${config.allowedCommand.join('|')})(\\s|$|\\?)`,
    'i'
  );
  return pattern.test(content);
}

// X·ª≠ l√Ω l·ªánh c√≥ tham s·ªë
function handleCommand(message) {
  const args = message.content.slice(config.prefix.length).trim().split(/ +/);
  const command = args.shift().toLowerCase();
  const params = args;
}

// G·ª≠i c·∫£nh b√°o t·ª± x√≥a
async function sendWarning(message) {
  const warning = await message.channel.send({
    content: `${message.author}, ch·ªâ ƒë∆∞·ª£c d√πng l·ªánh trong k√™nh n√†y!\n` +
             `L·ªánh h·ª£p l·ªá: ${config.allowedCommand.map(c => `${config.prefix}${c}`).join(', ')}`,
    allowedMentions: { users: [message.author.id] }
  });

  setTimeout(() => warning.delete().catch(() => {}), 10000);
}
// Lu√¥n ∆∞u ti√™n d√πng process.env
const token = process.env.DISCORD_TOKEN || "";

client.login(token).catch(console.error);